import "./ui_dialog.scss";
import type {
    IUIDialog,
    UIDialogMouseCallback,
    UIDialogDisplayOptions,
    UIDialogButton,
} from "./ui_interfaces";

const dialog = new (class Dialog implements IUIDialog {
    private container: HTMLDivElement | null = null;
    private modal: HTMLDivElement | null = null;
    private buttonsContainer: HTMLDivElement | null = null;
    private checkboxesContainer?: HTMLDivElement;

    constructor() {}

    /**
     * Display a modal dialog with the specified title, message, and buttons.
     *
     * @param {Object} typeOption - Configuration options for the dialog.
     * @param {string} typeOption.title - The title of the dialog.
     * @param {string} typeOption.message - The message or description shown in the dialog.
     * @param {Object[]} [typeOption.buttons] - An array of button configurations.
     * @param {string} options.buttons[].text - The text content of the button.
     * @param {string} [options.buttons[].style] - Inline styles to apply to the button.
     * @param {string} [options.buttons[].bgColor] - Background color of the button.
     * @param {string} [options.buttons[].className] - Additional class name(s) to add to the button.
     * @param {Function} options.buttons[].onclick - The callback function to execute when the button is clicked.
     * @param {MouseEvent} options.buttons[].onclick.event - The MouseEvent object generated by the click event.
     * @param {boolean} [options.buttons[].focus=false] - Flag indicating whether to focus on the button when the dialog is opened.
     * @param {boolean} [options.allowCloseButton=false] - Flag indicating whether to allow a close button in the dialog.
     * @param {boolean} [options.autoClose=true] - Flag indicating whether to automatically close the dialog when a button is clicked.
     * @param {boolean} [options.isError=false] - Flag indicating whether the dialog represents an error.
     * @returns {void}
     * @example
     * // Example usage:
     * const myDialog = new Dialog();
     * myDialog.display({
     *   title: "Dialog Title",
     *   message: "This is the dialog message.",
     *   buttons: [
     *     {
     *       text: "OK",
     *       onclick: (event) => {
     *         console.log("OK button clicked");
     *         // Add your logic here for OK button click
     *       },
     *       focus: true, // Focus on this button when the dialog opens
     *     },
     *     {
     *       text: "Cancel",
     *       onclick: (event) => {
     *         console.log("Cancel button clicked");
     *         // Add your logic here for Cancel button click
     *       },
     *     },
     *   ],
     *   allowCloseButton: true,
     *   autoClose: true,
     * });
     */
    display(options: UIDialogDisplayOptions): void {
        if (!this.container) this.create();
        if (options.buttons === undefined) options.buttons = [];
        if (options.allowCloseButton === undefined)
            options.allowCloseButton = false;
        if (options.autoClose === undefined) options.autoClose = true;
        if (options.isError === undefined) options.isError = false;
        if (!this.modal || !this.container) return;
        const dialogTitle = this.modal.querySelector("#_dialog-title")!;
        const dialogDesc = this.modal.querySelector("#_dialog-desc")!;
        const dialogButtons = this.buttonsContainer!;

        dialogTitle.textContent = options.title;
        dialogDesc.innerHTML = "";
        dialogDesc.textContent = options.message;

        while (dialogButtons.firstChild) {
            dialogButtons.removeChild(dialogButtons.firstChild);
        }
        (
            this.modal.querySelector("#_dialog-close") as HTMLDivElement
        ).style.display = options.allowCloseButton ? "" : "none";
        options.isError
            ? this.container.classList.add("_error")
            : this.container.classList.remove("_error");

        options.buttons.forEach((buttonInfo) => {
            const button = document.createElement("button");
            button.textContent = buttonInfo.text;
            button.className = "_dialog-button";
            if (buttonInfo.style)
                button.setAttribute("style", buttonInfo.style);
            if (buttonInfo.bgColor)
                button.style.backgroundColor = buttonInfo.bgColor;
            if (buttonInfo.className) button.className = buttonInfo.className;

            button.addEventListener("click", (event) => {
                if (buttonInfo.onclick) buttonInfo.onclick(event);
                if (options.autoClose) this.close();
            });

            dialogButtons.appendChild(button);

            if (buttonInfo.focus === true) button.focus();
        });

        if (this.checkboxesContainer) {
            while (this.checkboxesContainer.firstChild) {
                this.checkboxesContainer.removeChild(
                    this.checkboxesContainer.firstChild,
                );
            }
        }
        if (options.checkboxes) {
            if (!this.checkboxesContainer) {
                this.checkboxesContainer = document.createElement("div");
                this.checkboxesContainer.id = "_dialog-checkboxes";
                this.modal.insertBefore(
                    this.checkboxesContainer,
                    this.buttonsContainer,
                );
            }
            for (let o of options.checkboxes) {
                let c = document.createElement("div");
                c.className = "_dialog-checkbox";

                let i = document.createElement("input");
                i.type = "checkbox";
                i.id = "_dialog-" + o.id;
                i.checked = o.checked;
                c.appendChild(i);

                let l = document.createElement("label");
                l.htmlFor = i.id;
                l.textContent = o.text;
                c.appendChild(l);
                this.checkboxesContainer.appendChild(c);
            }
        }
        this.container.classList.add("_dialog-visible");
    }

    close() {
        this.container?.classList.remove("_dialog-visible");
    }

    /**
     * Display an error dialog with the specified error message.
     *
     * @param {string} message - The error message to be displayed in the dialog.
     * @param {boolean} fatal=false - Whether the error is fatal.
     * @param {(event: MouseEvent) => void} [continueWith] - Optional callback function to execute when the "OK" button is clicked.
     * @returns {void}
     * @example
     * // Example usage:
     * myDialog.error("An error occurred. Please try again.", (event) => {
     *   console.log("OK button clicked");
     *   // Add your logic here for OK button click
     * });
     */
    error(
        message: string,
        fatal?: boolean,
        continueWith?: UIDialogMouseCallback,
    ) {
        let b: UIDialogButton[] = [];
        if (!fatal) {
            b.push({
                text: "OK",
                onclick: (event: MouseEvent) => {
                    if (continueWith) continueWith(event);
                },
                focus: true,
            });
        } else {
            if (document.querySelector("nav")) {
                document.querySelector("nav")!.style.zIndex = "112";
            }
        }
        this.display({
            title: fatal ? "Fatal Error" : "Error",
            message: message,
            buttons: b,
            allowCloseButton: !fatal,
            autoClose: true,
            isError: true,
        });
    }

    confirm(
        message: string,
        continueWith?: UIDialogMouseCallback,
        cancelWith?: UIDialogMouseCallback,
    ) {
        this.display({
            title: "Confirm",
            message: message,
            buttons: [
                {
                    text: "Cancel",
                    onclick: (event) => {
                        if (cancelWith) cancelWith(event);
                    },
                    className: "_dialog-button-cancel",
                },
                {
                    text: "Continue",
                    onclick: (event) => {
                        if (continueWith) continueWith(event);
                    },
                    focus: true,
                },
            ],
            allowCloseButton: false,
            autoClose: true,
        });
    }

    confirmWithCheckbox(
        message: string,
        checkbox_text: string,
        checkbox_checked: boolean,
        continueWith?: (e: MouseEvent, checkboxStatus: boolean) => void,
        cancelWith?: (e: MouseEvent, checkboxStatus: boolean) => void,
    ) {
        this.display({
            title: "Confirm",
            message: message,
            buttons: [
                {
                    text: "Cancel",
                    onclick: (event) => {
                        if (cancelWith)
                            cancelWith(
                                event,
                                this.checkboxesContainer!.querySelector(
                                    "input",
                                )!.checked,
                            );
                    },
                    className: "_dialog-button-cancel",
                },
                {
                    text: "Continue",
                    onclick: (event) => {
                        if (continueWith)
                            continueWith(
                                event,
                                this.checkboxesContainer!.querySelector(
                                    "input",
                                )!.checked,
                            );
                    },
                    focus: true,
                },
            ],
            checkboxes: [
                {
                    id: "confirm-checkbox",
                    text: checkbox_text,
                    checked: checkbox_checked,
                },
            ],
            allowCloseButton: false,
            autoClose: true,
        });
    }

    success(message?: string, continueWith?: UIDialogMouseCallback) {
        this.display({
            title: "Success",
            message: message ?? "Operation successful",
            buttons: [
                {
                    text: "OK",
                    onclick: (event) => {
                        if (continueWith) continueWith(event);
                    },
                    focus: true,
                    bgColor: "var(--green-color)",
                },
            ],
            allowCloseButton: false,
            autoClose: true,
        });
    }

    private create() {
        if (document.getElementById("_dialog")) {
            console.error("Trying to create dialog twice!");
            this.container = document.getElementById(
                "_dialog",
            ) as HTMLDivElement;
            return;
        }
        let t = document.getElementById("_dialog");
        if (t) {
            console.error("Trying to create dialog twice!");
            this.container = t as HTMLDivElement;
            return;
        }
        const dialogContainer = document.createElement("div");
        dialogContainer.id = "_dialog";

        const dialogModal = document.createElement("div");
        dialogModal.id = "_dialog-modal";
        dialogContainer.role = dialogModal.role = "alertdialog";

        const dialogTitleContainer = document.createElement("div");
        dialogTitleContainer.id = "_dialog-title-container";

        const dialogTitle = document.createElement("div");
        dialogTitle.id = "_dialog-title";

        const dialogClose = document.createElement("div");
        dialogClose.id = "_dialog-close";
        // const closeIcon = document.createElement("ion-icon");
        // closeIcon.setAttribute("name", "close-circle-outline");
        // closeIcon.ariaLabel = "Close dialog";
        // dialogClose.appendChild(closeIcon);
        dialogClose.addEventListener("click", () => this.close());

        dialogTitleContainer.appendChild(dialogTitle);
        dialogTitleContainer.appendChild(dialogClose);

        const dialogDesc = document.createElement("div");
        dialogDesc.id = "_dialog-desc";

        const dialogButtons = document.createElement("div");
        dialogButtons.id = "_dialog-buttons";

        dialogModal.appendChild(dialogTitleContainer);
        dialogModal.appendChild(dialogDesc);
        dialogModal.appendChild(dialogButtons);

        dialogContainer.appendChild(dialogModal);

        this.container = dialogContainer;
        this.modal = dialogModal;
        this.buttonsContainer = dialogButtons;

        document.addEventListener("keydown", (e) => {
            if (
                e.key === "Escape" &&
                this.container?.classList.contains("_dialog-visible")
            ) {
                if (
                    (
                        this.modal?.querySelector(
                            "#_dialog-close",
                        ) as HTMLDivElement
                    ).style.display !== "none"
                ) {
                    this.close();
                }
            }
        });

        document.body.appendChild(this.container);
    }

    // opens the dialog, but empty, and returns the container
    openEmpty(options: UIDialogDisplayOptions): HTMLDivElement {
        this.display(options);
        const dialogDesc = this.modal.querySelector("#_dialog-desc")!;
        return dialogDesc as HTMLDivElement;
    }
})();
// @ts-expect-error
if (window.isDev) window.Dialog = dialog;
export default dialog;
